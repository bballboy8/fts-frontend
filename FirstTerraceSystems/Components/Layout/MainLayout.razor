@using FirstTerraceSystems.AuthProviders
@using FirstTerraceSystems.Entities
@using Microsoft.AspNetCore.Components.Authorization

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthStateProvider
@inject StateContainerService StateContainer

<div class="page">
    @* <div id="pageLoader">
    <div class="loading-wave">
    <div class="loading-bar"></div>
    <div class="loading-bar"></div>
    <div class="loading-bar"></div>
    <div class="loading-bar"></div>
    </div>
    </div>
    *@
    <main>
        @if (!NavigationManager.Uri.Contains("login") && !NavigationManager.Uri.Contains("register"))
        {
            <div id="headbar" class="top-row px-4">

                @* Display options code here *@
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle layout-btn" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DISPLAY OPTIONS
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <a role="button" class="dropdown-item">Save layout</a>
                        <a role="button" class="dropdown-item">Load layout</a>

                        <div class="dropdown dropend">
                            <a class="dropdown-item dropdown-toggle sub-menu" onclick="loadTemplates(event);" href="javascript:void(0)">Load template</a>
                            <div class="dropdown-menu" id="load-template-dropdown">

                                <a role="button" class="dropdown-item load-template" @onclick="() => LoadTemplate(1)"><span class="chart-1"></span> 1 chart</a>
                                <a role="button" class="dropdown-item load-template" @onclick="() => LoadTemplate(2)"><span class="main-grid"><span class="chart-2"></span> <span class="chart-2"></span> </span>2 charts</a>
                                <a role="button" class="dropdown-item load-template" @onclick="() => LoadTemplate(4)"><span style="margin-top: -7px;"><span class="chart-3-grid"> <span class="chart-2"></span> <span class="chart-2"></span></span> <span class="chart-3-grid"><span class="chart-2"></span> <span class="chart-2"></span> </span></span>4 charts</a>
                                <a role="button" class="dropdown-item load-template" @onclick="() => LoadTemplate(6)"><span style="margin-top: -7px;"><span class="chart-3-grid"> <span class="chart-6"></span> <span class="chart-6"></span></span> <span class="chart-3-grid"><span class="chart-6"></span> <span class="chart-6"></span> </span> <span class="chart-3-grid"><span class="chart-6"></span> <span class="chart-6"></span> </span> </span>6 charts</a>
                                <a role="button" class="dropdown-item load-template" @onclick="() => LoadTemplate(8)"><span style="margin-top: -7px;"><span class="chart-8-grid"> <span class="chart-8"></span> <span class="chart-8"></span></span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> </span>8 charts</a>

                            </div>
                        </div>
                    </div>
                </div>

                <div class="market-time">
                    <span class="market-time-text">4:34 AM EST</span>
                </div>

                <div class="market-open">
                    <span class="market-time-text">MARKET <span style="font-weight: 700;">OPEN</span></span>
                </div>
                <Button Class="me-2" Color="ButtonColor.Success" Outline="true" @onclick="Logout">Logout </Button>
                <Switch Class="w-auto" Value="IsDarkMode" ValueExpression="() => IsDarkMode" ValueChanged="ToggleDarkMode" />
            </div>
        }

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />


@code {
    private bool IsDarkMode = true;
    private void ToggleDarkMode(bool newValue)
    {   
        var allJSRuntimes = StateContainer.JSRuntimes;

        IsDarkMode = newValue;
        if (allJSRuntimes != null)
        {
            foreach (var jsRuntime in allJSRuntimes)
            {
                jsRuntime.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
            }
        }
        JSRuntime.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (!NavigationManager.Uri.ToLower().Contains("register"))
        {
            if (!authState.User.Identity?.IsAuthenticated ?? false)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
                NavigationManager.NavigateTo("/multiChats");
                // NavigationManager.NavigateTo("/stockchart");
            }
        }

    }

    private async Task Logout()
    {
        // await JSRuntime.InvokeVoidAsync("showLoader");
        var model = new LoginDto();
        await AuthenticationService.Logout(model);
        NavigationManager.NavigateTo("/login");
        StateHasChanged();
    }

    private async Task LoadTemplate(int totalCharts)
    {
        await JSRuntime.InvokeVoidAsync("createDashboard", totalCharts);


        for (int index = 1; index < Application.Current!.Windows.Count; index++)
        {
            var window = Application.Current!.Windows[index];
            Application.Current?.CloseWindow(window);
        }
    }


    [JSInvokable]
    public static async Task<object?> DragedChartWindow(IJSObjectReference jsObject, object chartId, object ohlc, object volume, object groupingUnits)
    {

        // await jsObject.InvokeVoidAsync("changeBackgroundColor", false);

        // await jsObject.InvokeVoidAsync("popUpChart", "log");
        var chartWindow = new ChartWindowPage(jsObject, chartId, ohlc, volume, groupingUnits);
        var window = new Window(chartWindow);

        // window.Destroying += (sender, e) =>
        // {
        //     Console.WriteLine("Destroying");
        // };

        Application.Current?.OpenWindow(window);
        // Application.Current?.CloseWindow(window);

        // return Task.FromResult(chart.ToString());
        return chartId;
    }

}