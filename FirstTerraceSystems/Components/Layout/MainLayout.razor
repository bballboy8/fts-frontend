@using Microsoft.AspNetCore.Authorization
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthStateProvider
@inject StateContainerService StateContainer
@inject BsToastService Toast
@inject WindowsSerivce WindowsSerivce
@inject ChartService ChartService
@* @attribute [Authorize] *@
@implements IDisposable

<Toasts class="p-3" Placement="ToastsPlacement.BottomCenter" Delay="2000" AutoHide="true" ShowCloseButton="false" StackLength="1" />
<Preload/>
<div class="page">
    <main>
        @if (!NavigationManager.Uri.Contains("login") && !NavigationManager.Uri.Contains("register") && !NavigationManager.Uri.Contains("loading"))
        {
            <div id="headbar" class="top-row px-4">

                @* Display options code here *@
                <div @ref="Er_DisplayOptions" class="dropdown" id="dropdownDisplayOptions">
                    <button class="btn btn-secondary dropdown-toggle layout-btn" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DISPLAY OPTIONS
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <a role="button" class="dropdown-item" data-item-type="savelayout" tabindex="1" onclick="saveLayout()">Save Layout</a>
                        @* <a role="button" class="dropdown-item">Load layout</a> *@

                        <div class="dropdown dropend">
                            <a id="loadLayoutButton" class="dropdown-item sub-menu" onclick="loadTemplates(event);" href="javascript:void(0)">Load Layout</a>
                            <div class="dropdown-menu" id="load-template-dropdown">
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="5" tabindex="2" @onclick="() => LoadTemplate(5)">
                                    <span style="margin-top: -7px;"><span class="default-chart-2-grid"> <span class="default-chart-2"></span> <span class="default-chart-2"></span></span> <span class="default-chart-3-grid"><span class="default-chart-3"></span> <span class="default-chart-3"></span> <span class="default-chart-3"></span> </span></span> Default Layout
                                </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="1" tabindex="3" @onclick="() => LoadTemplate(1)">
                                    <span class="chart-1"></span> 1 chart
                                </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="2" tabindex="4" @onclick="() => LoadTemplate(2)">
                                    <span class="main-grid"><span class="chart-2"></span> <span class="chart-2"></span> </span>2 charts
                                </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="4" tabindex="5" @onclick="() => LoadTemplate(4)">
                                    <span style="margin-top: -7px;"><span class="chart-3-grid"> <span class="chart-2"></span> <span class="chart-2"></span></span> <span class="chart-3-grid"><span class="chart-2"></span> <span class="chart-2"></span> </span></span>4 charts
                                </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="6" tabindex="6" @onclick="() => LoadTemplate(6)">
                                    <span style="margin-top: -7px;"><span class="chart-3-grid"> <span class="chart-6"></span> <span class="chart-6"></span></span> <span class="chart-3-grid"><span class="chart-6"></span> <span class="chart-6"></span> </span> <span class="chart-3-grid"><span class="chart-6"></span> <span class="chart-6"></span> </span> </span>6 charts
                                </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="8" tabindex="7" @onclick="() => LoadTemplate(8)">
                                    <span style="margin-top: -7px;"><span class="chart-8-grid"> <span class="chart-8"></span> <span class="chart-8"></span></span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> </span>8 charts
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="market-time">
                    <span class="market-time-text">@currentTime</span>
                </div>

                <div class="market-open">
                    <span class="market-time-text">MARKET <span style="font-weight: 700;">@MarketStatus</span></span>
                </div>
                <Button ElementId="btn-logout" Class="me-2" Color="ButtonColor.Success" Outline="true" @onclick="Logout">Logout </Button>
                <Switch Class="w-auto" Value="IsDarkMode" ValueExpression="() => IsDarkMode" ValueChanged="ToggleDarkMode" />
            </div>
        }

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool IsDarkMode = true;
    private ElementReference Er_DisplayOptions { get; set; }
    private string? currentTime;
    private string MarketStatus="Closed";
    private void ToggleDarkMode(bool value)
    {
        IsDarkMode = value;

        foreach (var chartPage in StateContainerService.ChartPages)
        {
            chartPage?.JSRuntime?.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
        }
        JSRuntime.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
        JSRuntime.InvokeVoidAsync("changeDropdownColor", IsDarkMode);
        StateContainerService.IsDarkMode = IsDarkMode;
    }


    private DotNetObjectReference<MainLayout>? _dotNetMainLayoutRef;

    protected override void OnInitialized()
    {
        _dotNetMainLayoutRef = DotNetObjectReference.Create(this);
        UpdateTime();
        // Update the time every minute
        var timer = new System.Timers.Timer(60000);
        timer.Elapsed += (sender, e) => UpdateTime();
        timer.Start();
    }

    private void UpdateTime()
    {
        var estTime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time"));
        var coreMarketStartTime = new TimeSpan(9, 30, 0); // 9:30 AM
        var coreMarketEndTime = new TimeSpan(16, 0, 0);   // 4:00 PM
        var timeOfDay = estTime.TimeOfDay;

        if (timeOfDay >= coreMarketStartTime && timeOfDay <= coreMarketEndTime)
        {
            MarketStatus = "Open";
        }
        else
        {
            MarketStatus = "Closed";
        }
        currentTime = estTime.ToString("h:mm tt EST");
        InvokeAsync(StateHasChanged);
    }

    // System.Timers.Timer timer;
    protected override async Task OnInitializedAsync()
    {

        await JSRuntime.InvokeVoidAsync("MainLayoutInterop.setDotNetReference", _dotNetMainLayoutRef);

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (!NavigationManager.Uri.ToLower().Contains("register"))
        {
            if (!authState.User.Identity?.IsAuthenticated ?? false)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                WindowsSerivce.UnlockWindowResize();
                await JSRuntime.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
                NavigationManager.NavigateTo("/loading");
                // NavigationManager.NavigateTo("/multiChats");
                // NavigationManager.NavigateTo("/stockchart");
            }
        }

        await JSRuntime.InvokeVoidAsync("LoadKeyBordEventToDisplayOptions", Er_DisplayOptions, ChartService.InitialChartSymbols);
    }

    private async Task Logout()
    {
        var model = new LoginDto();
      _= Task.Run( async () =>
        {
          await AuthenticationService.Logout(model);    
        }).ConfigureAwait(false);
        
        WindowsSerivce.CloseAllOpenedWindows();
        WindowsSerivce.LockWindowResize();
        NavigationManager.NavigateTo("/login");
        StateHasChanged();
    }

    [JSInvokable]
    public void SaveLayout(int totalCharts)
    {
        ChartService.UpdateChartLayout(totalCharts);
        ChartService.SaveChartLayout();
        Toast.ShowSuccessMessage("Layout Saved!");
    }

    private async Task LoadTemplate(int totalCharts)
    {
        ChartService.UpdateChartLayout(totalCharts);
        await JSRuntime.InvokeVoidAsync("createDashboard", ChartService.InitialChartLayout, ChartService.InitialChartSymbols);
        StateContainerService.IsAllowCloseAllWindows = true;
        WindowsSerivce.CloseAllOpenedWindows();
        await JSRuntime.InvokeVoidAsync("RefreshChartBySymbol");
    }

    public void Dispose()
    {
        _dotNetMainLayoutRef?.Dispose();
    }
}