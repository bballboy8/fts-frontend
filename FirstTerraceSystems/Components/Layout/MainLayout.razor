@using Microsoft.AspNetCore.Authorization
@using System.Timers
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthStateProvider
@inject StateContainerService StateContainer
@inject BsToastService Toast
@inject WindowsSerivce WindowsSerivce
@inject ChartService ChartService
@inject NasdaqService NasdaqService
@* @attribute [Authorize] *@
@implements IDisposable


@inject PreloadService preloadService


<Toasts class="p-3" Placement="ToastsPlacement.BottomCenter" Delay="2000" AutoHide="true" ShowCloseButton="false" StackLength="1" />
<Preload />
<div class="page" style="background: radial-gradient(circle at 50% 8.19%, #1B2934 0%, #000000 100%);">
    <main>
        @* @if (IsLoading)
{
    <div class="loading-overlay" style="visibility: visible;">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
} *@

        @if (!NavigationManager.Uri.Contains("login") && !NavigationManager.Uri.Contains("register") && !NavigationManager.Uri.Contains("loading"))
        {

           

            <div id="headbar" class="top-row px-4">
               @*  <div class="market-time" style="border: 2px solid; padding-bottom: 20px !important; margin-bottom:20px !important; display: inline-block;">
                    <button @onclick="RefreshContent" style="border: 2px solid; padding: 6px 8px; cursor: pointer; border-radius: 4px;">
                        Refresh
                    </button>
                </div> *@
                @* Display options code here *@
                <div @ref="Er_DisplayOptions" class="dropdown" id="dropdownDisplayOptions">
                    <button class="btn btn-secondary dropdown-toggle layout-btn" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DISPLAY OPTIONS
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <a role="button" class="dropdown-item" data-item-type="savelayout" tabindex="1" onclick="saveLayout()">Save Layout</a>
                        @* <a role="button" class="dropdown-item">Load layout</a> *@

                        <div class="dropdown dropend">
                            <a id="loadLayoutButton" class="dropdown-item sub-menu" onclick="loadTemplates(event);" href="javascript:void(0)">Load Layout</a>
                            <div class="dropdown-menu" id="load-template-dropdown">
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="5" tabindex="2" @onclick="() => LoadTemplate(5)">
                                    <span style="margin-top: -7px;"><span class="default-chart-2-grid"> <span class="default-chart-2"></span> <span class="default-chart-2"></span></span> <span class="default-chart-3-grid"><span class="default-chart-3"></span> <span class="default-chart-3"></span> <span class="default-chart-3"></span> </span></span> Default Layout
                                </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="1" tabindex="3" @onclick="() => LoadTemplate(1)">
                                    <span class="chart-1"></span> 1 chart
                                </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="2" tabindex="4" @onclick="() => LoadTemplate(2)">
                                    <span class="main-grid"><span class="chart-2"></span> <span class="chart-2"></span> </span>2 charts
                                </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="4" tabindex="5" @onclick="() => LoadTemplate(4)">
                                    <span style="margin-top: -7px;"><span class="chart-3-grid"> <span class="chart-2"></span> <span class="chart-2"></span></span> <span class="chart-3-grid"><span class="chart-2"></span> <span class="chart-2"></span> </span></span>4 charts
                                </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="6" tabindex="6" @onclick="() => LoadTemplate(6)">
                                    <span style="margin-top: -7px;"><span class="chart-3-grid"> <span class="chart-6"></span> <span class="chart-6"></span></span> <span class="chart-3-grid"><span class="chart-6"></span> <span class="chart-6"></span> </span> <span class="chart-3-grid"><span class="chart-6"></span> <span class="chart-6"></span> </span> </span>6 charts
                                </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="8" tabindex="7" @onclick="() => LoadTemplate(8)">
                                    <span style="margin-top: -7px;"><span class="chart-8-grid"> <span class="chart-8"></span> <span class="chart-8"></span></span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> </span>8 charts
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="market-time">
                    <span class="market-time-text">@currentTime</span>
                </div>

                <div class="market-open">
                    <span class="market-time-text">MARKET <span style="font-weight: 700;">@MarketStatus</span></span>
                </div>
                <Button ElementId="btn-logout" Class="me-2" Style="background-color:#FB5B31 !important" Outline="true" @onclick="Logout">Logout </Button>
                <Switch Class="w-auto" Value="IsDarkMode" ValueExpression="() => IsDarkMode" ValueChanged="ToggleDarkMode" />
            </div>
        }

        <article class="content px-4" style="background: radial-gradient(circle at 50% 8.19%, #1B2934 0%, #000000 100%);">
            @Body
        </article>
    </main>
</div>

@code {
    private DateTime _lastCallTime; // Track the last time the jQuery function was called
    private const double CheckInterval = 10000; // 10 seconds in milliseconds
    private bool IsLoading { get; set; } = false;

    private Timer _connectivityTimer;
    private bool IsConnected = true;
    private bool IsDarkMode = true;
    private ElementReference Er_DisplayOptions { get; set; }
    private string? currentTime;
    public static string MarketStatus = "Closed";
    private void ToggleDarkMode(bool value)
    {
        IsDarkMode = value;

        foreach (var chartPage in StateContainerService.ChartPages)
        {
            chartPage?.JSRuntime?.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
        }
        JSRuntime.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
        JSRuntime.InvokeVoidAsync("changeDropdownColor", IsDarkMode);
        StateContainerService.IsDarkMode = IsDarkMode;
    }


    private DotNetObjectReference<MainLayout>? _dotNetMainLayoutRef;

    protected override void OnInitialized()
    {
        _dotNetMainLayoutRef = DotNetObjectReference.Create(this);
        UpdateTime();
        // Update the time every minute
        var timer = new System.Timers.Timer(5000);
        timer.Elapsed += (sender, e) => UpdateTime();
        timer.Start();
        IsLoading=false;
    }

    private async void UpdateTime()
    {
        if (IsConnected)
        {
            // List<HolidayList> holidayList = await NasdaqService.GetHolidays();
            var estTime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time"));
            var coreMarketStartTime = new TimeSpan(9, 30, 0); // 9:30 AM
            var coreMarketEndTime = new TimeSpan(16, 0, 0);   // 4:00 PM
            var timeOfDay = estTime.TimeOfDay;
            var dayOfWeek = estTime.DayOfWeek;

            if (dayOfWeek == DayOfWeek.Saturday || dayOfWeek == DayOfWeek.Sunday)
            {
                MarketStatus = "Closed"; // Market is closed on weekends
            }
            else if (timeOfDay >= coreMarketStartTime && timeOfDay <= coreMarketEndTime)
            {
                MarketStatus = "Open"; // Market is open during core hours on weekdays
            }
            else
            {
                MarketStatus = "Closed"; // Market is closed outside of core hours
            }

            // if (holidayList.Where(x => DateTime.Parse(x.date_time).Date == estTime.Date).Any())
            // {
            //     MarketStatus = "Closed";
            // }

            currentTime = estTime.ToString("h:mm tt EST");
        }
        InvokeAsync(StateHasChanged);
    }

    // System.Timers.Timer timer;
    protected override async Task OnInitializedAsync()
    {

        await JSRuntime.InvokeVoidAsync("MainLayoutInterop.setDotNetReference", _dotNetMainLayoutRef);

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (!NavigationManager.Uri.ToLower().Contains("register"))
        {
            if (!authState.User.Identity?.IsAuthenticated ?? false)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                WindowsSerivce.UnlockWindowResize();
                await JSRuntime.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
                NavigationManager.NavigateTo("/loading");
                // NavigationManager.NavigateTo("/multiChats");
                // NavigationManager.NavigateTo("/stockchart");
            }
        }
        var current = Connectivity.Current;
        InitializeConnectivityCheck();

        await JSRuntime.InvokeVoidAsync("LoadKeyBordEventToDisplayOptions", Er_DisplayOptions, ChartService.InitialChartSymbols);
    }

    private void InitializeConnectivityCheck()
    {
        // Initialize last call time to the current time
        _lastCallTime = DateTime.Now;

        // Set up the timer to check every 5 seconds
        _connectivityTimer = new Timer(7000);
        _connectivityTimer.Elapsed += CheckConnectivity;
        _connectivityTimer.AutoReset = true; // Ensure the timer repeats
        _connectivityTimer.Start();
    }

    private async void CheckConnectivity(object sender, ElapsedEventArgs e)
{
    var current = Connectivity.Current;
    var isConnected = current.NetworkAccess == NetworkAccess.Internet;

    TimeSpan elapsed = DateTime.Now - _lastCallTime;
    double totalMilliseconds = elapsed.TotalMilliseconds;

    if (isConnected)
    {
        if (totalMilliseconds > CheckInterval && !IsLoading)
        {
            DateTime previousValue = _lastCallTime;
            _lastCallTime = DateTime.Now;
            IsLoading = true;

            // Switch to the main thread before showing the preload spinner
            await InvokeAsync(() => preloadService.Show(SpinnerColor.Light, "Loading data..."));
            Console.WriteLine($"Calling refreshAllChartsIfOffline: {_lastCallTime}");

            await JSRuntime.InvokeVoidAsync("refreshAllChartsIfOffline", TimeZoneInfo.ConvertTimeFromUtc(DateTime.Parse(previousValue.ToString()).ToUniversalTime(), TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time")));

            // Switch back to the main thread to hide the preload spinner and update the UI state
            await InvokeAsync(() => 
            {
                preloadService.Hide();
                IsLoading = false;
                StateHasChanged();
            });
        }
        IsConnected = true;
        _lastCallTime = DateTime.Now;
    }
    else
    {
        IsConnected = false;
        IsLoading = false;
    }
}

    // private async void Connectivity_ConnectivityChanged(object sender, ConnectivityChangedEventArgs e)
    // {
    //     var access = e.NetworkAccess;

    //     if (access == Microsoft.Maui.Networking.NetworkAccess.None || access == Microsoft.Maui.Networking.NetworkAccess.Unknown)
    //     {
    //         startDateDeactivated = TimeZoneInfo
    //             .ConvertTimeFromUtc(
    //                 DateTime.UtcNow,
    //                 TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time"));
    //         Console.WriteLine("Deactivated");
    //         Console.WriteLine("No internet connection.");
    //     }
    //     else if (access == Microsoft.Maui.Networking.NetworkAccess.Internet)
    //     {

    //         RefreshContent();
    //         Console.WriteLine("Internet connection available.");
    //     }
    // }

    private async Task Logout()
    {
        try
        {
            var model = new LoginDto();
            await AuthenticationService.Logout(model);
            WindowsSerivce.CloseAllOpenedWindows();
            WindowsSerivce.LockWindowResize();
            NavigationManager.NavigateTo("/login");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout failed: {ex.Message}");
            // Log the exception or show a message to the user
        }
    }

    [JSInvokable]
    public void SaveLayout(int totalCharts)
    {
        ChartService.UpdateChartLayout(totalCharts);
        ChartService.SaveChartLayout();
        Toast.ShowSuccessMessage("Layout Saved!");
    }

    private async Task LoadTemplate(int totalCharts)
    {
        ChartService.UpdateChartLayout(totalCharts);
        await JSRuntime.InvokeVoidAsync("createDashboard", ChartService.InitialChartLayout, ChartService.InitialChartSymbols);
        StateContainerService.IsAllowCloseAllWindows = true;
        WindowsSerivce.CloseAllOpenedWindows();
        await JSRuntime.InvokeVoidAsync("updateAllSymbols", ChartService.InitialChartSymbols.Where(x => x.IsVisible));
    }
    
    // public void RefreshContent()
    // {
    //     Console.WriteLine("Hii");
    //     JSRuntime.InvokeVoidAsync("refreshAllChartsIfOffline", startDateDeactivated);
    // }

    public void Dispose()
    {
        _dotNetMainLayoutRef?.Dispose();
    }
}