@using FirstTerraceSystems.AuthProviders
@using FirstTerraceSystems.Entities
@using Microsoft.AspNetCore.Components.Authorization

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthStateProvider
@inject StateContainerService StateContainer
@inject BsToastService Toast
@inject WindowsSerivce WindowsSerivce

<Toasts class="p-3" Placement="ToastsPlacement.BottomCenter" Delay="2000" AutoHide="true" ShowCloseButton="false" StackLength="1" />

<div class="page">
    <main>
        @if (!NavigationManager.Uri.Contains("login") && !NavigationManager.Uri.Contains("register"))
        {
            <div id="headbar" class="top-row px-4">

                @* Display options code here *@
                <div @ref="Er_DisplayOptions" class="dropdown" id="dropdownDisplayOptions">
                    <button class="btn btn-secondary dropdown-toggle layout-btn" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DISPLAY OPTIONS
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <a role="button" class="dropdown-item" data-item-type="savelayout" tabindex="8" @onclick="() => SaveLayout()">Save Layout</a>
                        @* <a role="button" class="dropdown-item">Load layout</a> *@

                        <div class="dropdown dropend">
                            <a class="dropdown-item dropdown-toggle sub-menu" onclick="loadTemplates(event);" href="javascript:void(0)">Load Layout</a>
                            <div class="dropdown-menu" id="load-template-dropdown">
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="5" tabindex="2" @onclick="() => LoadTemplate(5)"><span style="margin-top: -7px;"><span class="default-chart-2-grid"> <span class="default-chart-2"></span> <span class="default-chart-2"></span></span> <span class="default-chart-3-grid"><span class="default-chart-3"></span> <span class="default-chart-3"></span> <span class="default-chart-3"></span> </span></span> Default Layout  </a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="1" tabindex="3" @onclick="() => LoadTemplate(1)"><span class="chart-1"></span> 1 chart</a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="2" tabindex="4" @onclick="() => LoadTemplate(2)"><span class="main-grid"><span class="chart-2"></span> <span class="chart-2"></span> </span>2 charts</a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="4" tabindex="5" @onclick="() => LoadTemplate(4)"><span style="margin-top: -7px;"><span class="chart-3-grid"> <span class="chart-2"></span> <span class="chart-2"></span></span> <span class="chart-3-grid"><span class="chart-2"></span> <span class="chart-2"></span> </span></span>4 charts</a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="6" tabindex="6" @onclick="() => LoadTemplate(6)"><span style="margin-top: -7px;"><span class="chart-3-grid"> <span class="chart-6"></span> <span class="chart-6"></span></span> <span class="chart-3-grid"><span class="chart-6"></span> <span class="chart-6"></span> </span> <span class="chart-3-grid"><span class="chart-6"></span> <span class="chart-6"></span> </span> </span>6 charts</a>
                                <a role="button" class="dropdown-item load-template" data-item-type="template" data-load-template="8" tabindex="7" @onclick="() => LoadTemplate(8)"><span style="margin-top: -7px;"><span class="chart-8-grid"> <span class="chart-8"></span> <span class="chart-8"></span></span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> <span class="chart-8-grid"><span class="chart-8"></span> <span class="chart-8"></span> </span> </span>8 charts</a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="market-time">
                    <span class="market-time-text">4:34 AM EST</span>
                </div>

                <div class="market-open">
                    <span class="market-time-text">MARKET <span style="font-weight: 700;">OPEN</span></span>
                </div>
                <Button Class="me-2" Color="ButtonColor.Success" Outline="true" @onclick="Logout">Logout </Button>
                <Switch Class="w-auto" Value="IsDarkMode" ValueExpression="() => IsDarkMode" ValueChanged="ToggleDarkMode" />
            </div>
        }

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool IsDarkMode = true;
    private ElementReference Er_DisplayOptions { get; set; }
    private void ToggleDarkMode(bool value)
    {
        IsDarkMode = value;

        foreach (var chartPage in StateContainerService.ChartPages)
        {
            chartPage?.JSRuntime?.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
        }

        JSRuntime.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
        StateContainerService.IsDarkMode = IsDarkMode;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (!NavigationManager.Uri.ToLower().Contains("register"))
        {
            if (!authState.User.Identity?.IsAuthenticated ?? false)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {

                WindowsSerivce.RevertWindowResize();
                await JSRuntime.InvokeVoidAsync("changeBackgroundColor", IsDarkMode);
                NavigationManager.NavigateTo("/multiChats");
                // NavigationManager.NavigateTo("/stockchart");
            }
        }

        await JSRuntime.InvokeVoidAsync("LoadKeyBordEventToDisplayOptions", Er_DisplayOptions, DotNetObjectReference.Create(this));
    }

    private async Task Logout()
    {
        // await JSRuntime.InvokeVoidAsync("showLoader");
        var model = new LoginDto();
        await AuthenticationService.Logout(model);
        NavigationManager.NavigateTo("/login");
        StateHasChanged();
    }

    [JSInvokable]
    public async Task SaveLayout()
    {
        await JSRuntime.InvokeVoidAsync("saveLayout");
        Toast.ShowSuccessMessage("Layout Saved!");
    }

    private async Task LoadTemplate(int totalCharts)
    {
        await JSRuntime.InvokeVoidAsync("createDashboard", totalCharts);

        StateContainerService.IsAllowCloseAllWindows = true;

        var parentWindow = Application.Current!.Windows[0];
        var needToCloseWindows = Application.Current.Windows.OfType<Window>().Where(w => w != parentWindow).ToList();

        foreach (var window in needToCloseWindows)
        {
            Application.Current?.CloseWindow(window);
        }
    }


    [JSInvokable]
    public static async Task<object?> DragedChartWindow(IJSObjectReference jsObject, object chartId, object ohlc, object volume, string symbol, object groupingUnits)
    {
        StateContainerService.IsAllowCloseAllWindows = false;
        StateContainerService.IsMainPage = false;
        var chartWindow = new ChartWindowPage(jsObject, chartId, ohlc, volume, symbol, groupingUnits);
        var window = new Window(chartWindow);
        Application.Current?.OpenWindow(window);
        return await Task.FromResult(chartId);
    }

}