@page "/multiChats"

@using System.Net.WebSockets
@using System.Text
@using System.Text.Json
@using FirstTerraceSystems.Features
@using FirstTerraceSystems.Models

@inject NasdaqService NasdaqService
@inject Repositories.SymbolicRepository SymbolicRepository
@inject IJSRuntime JS

<style>
    #popup {
        display: none;
        position: absolute;
        border: 1px solid #000;
        background-color: #fff;
        padding: 10px;
        z-index: 10000;
    }
</style>


<div class="container-fluid">
    ```
    <div id="chartList" class="row"></div>
</div>

@code {

    

    int SocketConnectionTrial = 0;

    protected override async Task OnInitializedAsync()
    {
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("T5.SetDotNetReference", lDotNetReference);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ConnectWebSocket(); 
            await Listen(); 
            await UpdateSymbolicDataToDB();

        }
        await JSRuntime.InvokeVoidAsync("loadDashboard");
    }

    private async Task UpdateSymbolicDataToDB()
    {
        var lastSymbol = SymbolicRepository.GetLastRecord();

        var dtStartDate = DateTime.Now.AddDays(-2);

        if (lastSymbol != null) dtStartDate = DateTime.Parse(lastSymbol.TimeStamp);

        var data = await NasdaqService.GetSymbolicData(dtStartDate, "");

        if (data != null)
        {
            SymbolicRepository.UpdateSymbolicDataToDB(data);
        }
    }

    private async Task ConnectWebSocket()
    {
        if (SocketConnectionTrial < 3)
        {
            try
            {
                //ws://localhost:6969/ws test socket url
                await StateContainerService.webSocket.ConnectAsync(new Uri("ws://52.0.33.126:8000/nasdaq/get_real_data"), CancellationToken.None);
                //await StateContainerService.webSocket.ConnectAsync(new Uri("ws://localhost:6969/ws"), CancellationToken.None);
                var buffer = Encoding.UTF8.GetBytes("start");
                await StateContainerService.webSocket.SendAsync(new ArraySegment<byte>(buffer), WebSocketMessageType.Text, true, CancellationToken.None);
                SocketConnectionTrial = 0;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                SocketConnectionTrial++;
                await ConnectWebSocket();
            }
        }

    }

    private async Task Listen()
    {
        var buffer = new byte[1024];

        using (var memoryStream = new MemoryStream())
        {
            try
            {
                while (StateContainerService.webSocket.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result;
                    do
                    {
                        result = await StateContainerService.webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                        await memoryStream.WriteAsync(buffer, 0, result.Count);
                    } while (!result.EndOfMessage);

                    memoryStream.Seek(0, SeekOrigin.Begin);
                    var message = Encoding.UTF8.GetString(memoryStream.ToArray());

                    if (result.MessageType == WebSocketMessageType.Text && !message.Contains("start"))
                    {
                        await ProcessMessage(message);
                    }

                    memoryStream.SetLength(0);
                }
            }
            catch (WebSocketException ex)
            {
                Console.WriteLine($"WebSocket error: {ex.Message}");
                await ConnectWebSocket();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Unexpected error: {ex.Message}");
            }
        }
    }

    private async Task ProcessMessage(string message)
    {
        await JSRuntime.InvokeVoidAsync("console.log", message);

        try
        {
            var data = JsonSerializer.Deserialize<NasdaqResponse>(message);
            SymbolicRepository.UpdateSymbolicsocketDataToDB(data);
            await JSRuntime.InvokeVoidAsync("RefreshChartData");
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON deserialization error: {ex.Message}");
        }
    }

    [JSInvokable("GetStockBySymbol")]
    public async Task<dynamic> GetStockBySymbol(string symbol)
    {
        var symbolicdata = SymbolicRepository.GetSymbolicDataBySymbol(symbol);
        return await Task.FromResult(symbolicdata);
    }
}