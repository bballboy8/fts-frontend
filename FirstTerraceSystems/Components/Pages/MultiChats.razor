@page "/multiChats"
@using FirstTerraceSystems.Entities.Nasdaq
@using FirstTerraceSystems.Features
@using System.Net.WebSockets
@using System.Text
@inject NsdaqService NsdaqService
@inject SqlLiteService SqlliteService
@inject IJSRuntime JS

<style>
    #popup {
        display: none;
        position: absolute;
        border: 1px solid #000;
        background-color: #fff;
        padding: 10px;
        z-index: 10000;
    }
</style>


<div class="container-fluid">
    <div id="chartList" class="row"></div>
</div>


@code
{
    private IEnumerable<EquitiesBarModal>? EquitiesBars { get; set; }

    private ClientWebSocket webSocket = new ClientWebSocket();

    protected override async Task OnInitializedAsync()
    {
        // var To = DateTime.Now;
        // var from = To.AddDays(-3);
        // from = new DateTime(from.Year, from.Month, from.Day, 9, 0, 0);
        WebSocketClientConnection.AddListener(x =>
        {
            Console.WriteLine(x);
            JSRuntime.InvokeVoidAsync("console.log", x);
        });
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("T5.SetDotNetReference", lDotNetReference);
        //EquitiesBars = await NsdaqService.GetEquitiesBars(from, To, "AAPL");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Call api and update data to the sqllite
        await NsdaqService.GetSymbolicData(DateTime.Today.AddDays(-1), "AAPL");
        //
        var symbolicdata = SqlliteService.GetSymbolicData("AAPL");
        await JSRuntime.InvokeVoidAsync("LoadData", symbolicdata);
        await JSRuntime.InvokeVoidAsync("createDashboard", 1);
    }

    [JSInvokable("GetStockBySymbol")]
    public async Task<dynamic> GetStockBySymbol(string symbol)
    {
        var symbolicdata = SqlliteService.GetSymbolicData("AAPL");
        return symbolicdata;
    }
}