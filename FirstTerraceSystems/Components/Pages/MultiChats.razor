@page "/multiChats"

@using System.Net.WebSockets
@using System.Text
@using System.Text.Json
@using FirstTerraceSystems.Entities
@using FirstTerraceSystems.Features
@using FirstTerraceSystems.Models
@using Blazored.LocalStorage;
@using System.Collections.Concurrent

@inject NasdaqService NasdaqService
@inject Repositories.SymbolicRepository SymbolicRepository
@inject IJSRuntime JSRuntime
@inject ChartService ChartService
@inject ILocalStorageService LocalStorage

@implements IAsyncDisposable

<style>
    #popup {
        display: none;
        position: absolute;
        border: 1px solid #000;
        background-color: #fff;
        padding: 10px;
        z-index: 10000;
    }
</style>

<div class="container-fluid">
    <div id="chartList" class="row"></div>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("T5.SetDotNetReference", DotNetObjectReference.Create(this));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateSymbolicDataToDB();
            await JSRuntime.InvokeVoidAsync("loadDashboard");

            await WebSocketClient.ConnectAsync();
            await JSRuntime.InvokeVoidAsync("console.log", "ConnectAsync");

            WebSocketClient.ActionRealDataReceived -= OnRealDataReceived;
            WebSocketClient.ActionReferenceChart -= RefreshCharts;

            WebSocketClient.ActionRealDataReceived += OnRealDataReceived;
            WebSocketClient.ActionReferenceChart += RefreshCharts;

            await WebSocketClient.ListenAsync();
            await JSRuntime.InvokeVoidAsync("console.log", "ListenAsync");
        }
    }

    private async Task UpdateSymbolicDataToDB()
    {

        // await JSRuntime.InvokeVoidAsync("console.log", "UpdateSymbolicDataToDB");

        // var lastSymbol = SymbolicRepository.GetLastRecord();

        // if (!(lastSymbol != null && DateTime.TryParse(lastSymbol.TimeStamp, out DateTime startDate)))
        // {
        //     startDate = DateTime.Now.AddDays(-2);
        // }

        // var data = await NasdaqService.GetSymbolicData(startDate, "AAPL");

        // SymbolicRepository.UpdateSymbolicDataToDBFromApi(data);

        var startDate = DateTime.Now.AddDays(-2);

        Parallel.ForEach(ChartService.InitialChartSymbols.Where(a => a.IsVisible), async chart =>
        {
            var symbolic = SymbolicRepository.GetLastRecordBySymbol(chart.Symbol);
            var symbolicDate = symbolic?.Date ?? startDate;
            var symbolicDatas = await NasdaqService.GetSymbolicData(symbolicDate, chart.Symbol);

            SymbolicRepository.UpdateSymbolicDataToDBFromApi(symbolicDatas);
        });
    }

    private void OnRealDataReceived(NasdaqResponse? nasdaqData)
    {
        if (nasdaqData != null)
        {
            SymbolicRepository.UpdateSymbolicDataToDBFromSocket(nasdaqData);
        }
    }

    private async Task RefreshCharts()
    {
        await JSRuntime.InvokeVoidAsync("refreshCharts");
    }

    [JSInvokable]
    public async Task<IEnumerable<SymbolicData>> GetChartDataBySymbol(string symbol, LastDataPoint? lastPoint)
    {

        var symbolic = SymbolicRepository.GetExistsSymbol(symbol);

        if (symbolic == null || string.IsNullOrEmpty(symbolic.Symbol)) return new List<SymbolicData>();

        if (lastPoint == null)
        {
            var symbolics = SymbolicRepository.GetChartDataBySymbol(symbolic.Symbol);
            return await Task.FromResult(symbolics);
        }
        else
        {
            var symbolics = SymbolicRepository.GetChartDataBySymbol(symbolic.Symbol, lastPoint.PrimaryKey);
            return await Task.FromResult(symbolics);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await WebSocketClient.CloseAsync();
    }
}