@page "/multiChats"
@using FirstTerraceSystems.Entities.Nasdaq
@using FirstTerraceSystems.Features
@using System.Net.WebSockets
@using System.Text
@using System.Text.Json
@inject NsdaqService NsdaqService
@inject SqlLiteService SqlliteService
@inject IJSRuntime JS

<style>
    #popup {
        display: none;
        position: absolute;
        border: 1px solid #000;
        background-color: #fff;
        padding: 10px;
        z-index: 10000;
    }
</style>


<div class="container-fluid">
    <div id="chartList" class="row"></div>
</div>


@code
{
    private IEnumerable<EquitiesBarModal>? EquitiesBars { get; set; }

    private ClientWebSocket webSocket = new ClientWebSocket();

    protected override async Task OnInitializedAsync()
    {
        // var To = DateTime.Now;
        // var from = To.AddDays(-3);
        // from = new DateTime(from.Year, from.Month, from.Day, 9, 0, 0);



        var lDotNetReference = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("T5.SetDotNetReference", lDotNetReference);
        //EquitiesBars = await NsdaqService.GetEquitiesBars(from, To, "AAPL");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Call api and update data to the sqllite
        if (firstRender)
        {
            //WebSocketClientConnection.SendStringAsync("start");
            await NsdaqService.GetSymbolicData();
            await ConnectWebSocket();
            Listen();
            //await NsdaqService.GetSymbolicData();            
        }

        // var symbolicdata = SqlliteService.GetSymbolicData("AAPL");
        //await JSRuntime.InvokeVoidAsync("LoadData", symbolicdata);


        await JSRuntime.InvokeVoidAsync("loadDashboard", 1);
    }
    int SocketConnectionTrial = 0;
    private async Task ConnectWebSocket()
    {
        if (SocketConnectionTrial < 3)
        {
            try
            {
                await webSocket.ConnectAsync(new Uri("ws://52.0.33.126:8000/nasdaq/get_real_data"), CancellationToken.None);
                var buffer = Encoding.UTF8.GetBytes("start");
                await webSocket.SendAsync(new ArraySegment<byte>(buffer), WebSocketMessageType.Text, true, CancellationToken.None);
                SocketConnectionTrial = 0;
            }
            catch (Exception)
            {
                SocketConnectionTrial++;
            }
        }

    }

    private async Task Listen()
    {
        // WebSocketClientConnection.AddListener(x =>
        //{
        //    Console.WriteLine(x);
        //    JSRuntime.InvokeVoidAsync("console.log", x);
        //});

        var buffer = new byte[1024 * 4];
        while (webSocket.State == WebSocketState.Open)
        {
            try
            {
                var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                if (result.MessageType == WebSocketMessageType.Text)
                {
                    var message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                    if (!message.Contains("start"))
                    {
                        await JSRuntime.InvokeVoidAsync("console.log", message);
                        var data = JsonSerializer.Deserialize<NasdaqData>(message);
                        SqlliteService.UpdateSymbolicsocketDataToDB(data);
                        await JSRuntime.InvokeVoidAsync("RefreshChartData");
                    }
                }
            }
            catch (Exception ex)
            {
                await ConnectWebSocket();   
            }
        }
    }

    [JSInvokable("GetStockBySymbol")]
    public async Task<dynamic> GetStockBySymbol(string symbol)
    {
        var symbolicdata = SqlliteService.GetSymbolicData(symbol);
        return symbolicdata;
    }


}