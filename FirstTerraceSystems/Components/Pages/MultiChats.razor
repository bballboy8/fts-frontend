@page "/multiChats"

@using System.Net.WebSockets
@using System.Text
@using System.Text.Json
@using FirstTerraceSystems.Features
@using FirstTerraceSystems.Models

@inject NasdaqService NasdaqService
@inject Repositories.SymbolicRepository SymbolicRepository
@inject IJSRuntime JS
@implements IDisposable

<style>
    #popup {
        display: none;
        position: absolute;
        border: 1px solid #000;
        background-color: #fff;
        padding: 10px;
        z-index: 10000;
    }
</style>


<div class="container-fluid">
    <div id="chartList" class="row"></div>
</div>

@code {

    int SocketConnectionTrial = 0;

    protected override async Task OnInitializedAsync()
    {
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("T5.SetDotNetReference", lDotNetReference);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            WebSocketClient.ActionRealDataReceived -= OnRealDataReceived;
            WebSocketClient.ActionReferenceChart -= ReferenceChart;

            WebSocketClient.ActionRealDataReceived += OnRealDataReceived;
            WebSocketClient.ActionReferenceChart += ReferenceChart;

            await WebSocketClient.ConnectAsync();
            WebSocketClient.ListenAsync();
            await UpdateSymbolicDataToDB();
        }
        await JSRuntime.InvokeVoidAsync("loadDashboard");
    }

    private async Task UpdateSymbolicDataToDB()
    {
        var lastSymbol = SymbolicRepository.GetLastRecord();

        var dtStartDate = DateTime.Now.AddDays(-2);

        if (lastSymbol != null) dtStartDate = DateTime.Parse(lastSymbol.TimeStamp);

        var data = await NasdaqService.GetSymbolicData(dtStartDate, "");

        if (data != null)
        {
            SymbolicRepository.UpdateSymbolicDataToDB(data);
        }
    }

    private void OnRealDataReceived(NasdaqResponse? nasdaqData)
    {
        if (nasdaqData != null)
        {
            SymbolicRepository.UpdateSymbolicsocketDataToDB(nasdaqData);
        }
    }

    private async Task ReferenceChart()
    {
        await JSRuntime.InvokeVoidAsync("RefreshChartData");
    }

    [JSInvokable("GetStockBySymbol")]
    public async Task<dynamic> GetStockBySymbol(string symbol)
    {
        var symbolicdata = SymbolicRepository.GetSymbolicDataBySymbol(symbol);
        return await Task.FromResult(symbolicdata);
    }

    async void IDisposable.Dispose()
    {
        await WebSocketClient.CloseAsync();
    }
}