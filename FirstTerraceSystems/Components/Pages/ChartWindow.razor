@inject IJSRuntime JSRuntime
@inject StateContainerService StateContainer
@inject WindowsSerivce WindowsSerivce
@inject Repositories.SymbolicRepository SymbolicRepository

<div @ref="ER_ChartWindow"></div>

@code {


    [Parameter]
    public object? ChartIndx { get; set; }

    [Parameter]
    public object? OhlcData { get; set; }

    [Parameter]
    public object? VolumeData { get; set; }

    [Parameter]
    public object? GroupingUnits { get; set; }

    [Parameter]
    public object? MinPoint { get; set; }

    [Parameter]
    public object? MaxPoint { get; set; }

    [Parameter]
    public object? Symbol { get; set; }

    private ElementReference ER_ChartWindow { get; set; }

    private Models.ChartPageModal ChartPageModal { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ChartPageModal = new Models.ChartPageModal { ChartId = ChartIndx?.ToString(), JSRuntime = JSRuntime, UpdatedMinExtreme = MinPoint, UpdatedMaxExtreme = MaxPoint, Symbol = Symbol };
        WindowsSerivce.UnlockWindowResize();
        StateContainerService.AddChartPage(ChartPageModal);
    }

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("T5.SetDotNetReference", DotNetObjectReference.Create(this));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("changeBackgroundColor", StateContainerService.IsDarkMode);
            await JSRuntime.InvokeVoidAsync("popoutChartWindow", DotNetObjectReference.Create(this), ER_ChartWindow, ChartIndx, OhlcData, VolumeData, GroupingUnits, MinPoint, MaxPoint, Symbol);
        }
    }

    [JSInvokable]
    public void ZoomingChanged(object minPoint, object maxPoint)
    {
        ChartPageModal.UpdatedMinExtreme = minPoint;
        ChartPageModal.UpdatedMaxExtreme = maxPoint;
    }

    [JSInvokable("GetStockBySymbol")]
    public async Task<dynamic> GetStockBySymbol(string symbol)
    {
        var symbolicdata = SymbolicRepository.GetSymbolicDataBySymbol(symbol);
        return await Task.FromResult(symbolicdata);
    }
}