@using Blazored.LocalStorage
@using FirstTerraceSystems.Entities
@using FirstTerraceSystems.Features
@using FirstTerraceSystems.Models
@inject IJSRuntime JSRuntime
@inject StateContainerService StateContainer
@inject WindowsSerivce WindowsSerivce
@inject Repositories.SymbolicRepository SymbolicRepository

<div @ref="ER_ChartWindow"></div>

@code { 
    [Parameter]
    public object? ChartIndx { get; set; }

    [Parameter]
    public object? MinPoint { get; set; }

    [Parameter]
    public object? MaxPoint { get; set; }

    [Parameter]
    public string? Symbol { get; set; }

    private ElementReference ER_ChartWindow { get; set; }

    private Models.ChartModal ChartPageModal { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ChartPageModal = new Models.ChartModal { ChartId = ChartIndx?.ToString(), JSRuntime = JSRuntime, UpdatedMinExtreme = MinPoint, UpdatedMaxExtreme = MaxPoint, Symbol = Symbol };
        WindowsSerivce.UnlockWindowResize();
        StateContainerService.AddChartPage(ChartPageModal);
    }

    protected override async Task OnInitializedAsync()
    {
        WebSocketClient.ActionReferenceChart -= RefreshCharts;

        WebSocketClient.ActionReferenceChart += RefreshCharts;

        await JSRuntime.InvokeVoidAsync("T5.SetDotNetReference", DotNetObjectReference.Create(this));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("changeBackgroundColor", StateContainerService.IsDarkMode);
            await JSRuntime.InvokeVoidAsync("popoutChartWindow", DotNetObjectReference.Create(this), ER_ChartWindow, ChartIndx, MinPoint, MaxPoint, Symbol);
        }
    }

    private async Task RefreshCharts()
    {
        await JSRuntime.InvokeVoidAsync("refreshCharts");
    }

    [JSInvokable]
    public void ZoomingChanged(object minPoint, object maxPoint)
    {
        ChartPageModal.UpdatedMinExtreme = minPoint;
        ChartPageModal.UpdatedMaxExtreme = maxPoint;
    }

    [JSInvokable]
    public void SymbolChanged(string symbol)
    {
        Symbol = symbol;
        ChartPageModal.Symbol = symbol;
    }

    [JSInvokable]
    public async Task<IEnumerable<SymbolicData>> GetChartDataBySymbol(string symbol, LastDataPoint? lastPoint)
    {
        var symbolic = SymbolicRepository.GetExistsSymbol(symbol);

        if (symbolic == null || string.IsNullOrEmpty(symbolic.Symbol)) return new List<SymbolicData>();

        if (lastPoint == null)
        {
            var symbolics = SymbolicRepository.GetChartDataBySymbol(symbol);
            return await Task.FromResult(symbolics);
        }
        else
        {
            var symbolics = SymbolicRepository.GetChartDataBySymbol(symbol, lastPoint.PrimaryKey);
            return await Task.FromResult(symbolics);
        }
    }
}