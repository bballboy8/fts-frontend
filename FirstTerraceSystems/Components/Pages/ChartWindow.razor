@using System.Text.Json
@inject StateContainerService StateContainer
@inject WindowsSerivce WindowsSerivce
@inject Repositories.MarketFeedRepository MarketFeedRepository
@inject Repositories.TickerRepository TickerRepository
@inject BsToastService Toast
@inject ChartService ChartService
@inject NasdaqHistoricalDataService HistoricalDataService
@inject NasdaqService NasdaqService
@implements IDisposable

<div @ref="ER_ChartWindow"></div>

@code {
    private const int MarketFeedChunkSize = 20000;

    [Parameter]
    public object? ChartIndx { get; set; }

    [Parameter]
    public object? MinPoint { get; set; }

    [Parameter]
    public object? MaxPoint { get; set; }

    [Parameter]
    public string Symbol { get; set; }

    private ElementReference ER_ChartWindow { get; set; }

    private Models.ChartModal ChartPageModal { get; set; } = new();

    private DotNetObjectReference<ChartWindow>? _dotChartWindowRef;
    private const int PointSize = 300;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        ChartPageModal = new Models.ChartModal { ChartId = ChartIndx?.ToString(), JSRuntime = JSRuntime, UpdatedMinExtreme = MinPoint, UpdatedMaxExtreme = MaxPoint, Symbol = Symbol };
        WindowsSerivce.UnlockWindowResize();
        StateContainerService.AddChartPage(ChartPageModal);
        _dotChartWindowRef = DotNetObjectReference.Create(this);
        WebSocketClient.ActionReferenceChart += RefreshCharts;
    }

    public void RemoveRefresh()
    {

        WebSocketClient.ActionReferenceChart -= RefreshCharts;
    }

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("ChatAppInterop.setDotNetReference", _dotChartWindowRef);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("changeBackgroundColor", StateContainerService.IsDarkMode);
            await JSRuntime.InvokeVoidAsync("popoutChartWindow", _dotChartWindowRef, ER_ChartWindow, ChartIndx, Symbol);

            IEnumerable<MarketFeed>? marketFeeds = MultiCharts.datasets[Symbol];
            await SendChartDataInChunks(Symbol, marketFeeds);

            await JSRuntime.InvokeVoidAsync("setMinMaxPointToPopoutChart", MinPoint, MaxPoint);
        }
    }

    private async Task RefreshCharts(NasdaqResponse? response)
    {
        IEnumerable<IGrouping<string?, MarketFeed>>? groupedData = response.Data.Select(data => new MarketFeed(response.Headers, data)).GroupBy(mf => mf.Symbol);

        var dataGot = groupedData.FirstOrDefault((x) => x.Key == Symbol)?.ToList();
        if (dataGot != null)
        {
            MultiCharts.datasets[Symbol] = MultiCharts.datasets[Symbol].Concat(dataGot).ToList();
            await JSRuntime.InvokeVoidAsync("refreshCharts", Symbol, dataGot);
        }
    }

    [JSInvokable]
    public void ZoomingChanged(object minPoint, object maxPoint)
    {
        ChartPageModal.UpdatedMinExtreme = minPoint;
        ChartPageModal.UpdatedMaxExtreme = maxPoint;
    }

    [JSInvokable]
    public void SymbolChanged(string chartId, string symbol)
    {
        ChartService.UpdateSymbol(chartId, symbol);
    }

    [JSInvokable]
    public async Task<IEnumerable<MarketFeed>> GetChartDataByLastFeedPoint(string symbol, DataPoint lastPoint)
    {
        IEnumerable<MarketFeed> marketFeeds = await MarketFeedRepository.GetChartDataBySymbol(symbol, lastPoint.PrimaryKey);
        return marketFeeds;
    }

    [JSInvokable]
    public async Task<IEnumerable<MarketFeed>?> UpdateChartSymbol(string chartId, string symbol)
    {
        if (!TickerRepository.IsTickerExists(symbol))
        {
            Toast.ShowDangerMessage($"Ticker '{symbol}' does not exist.");
            return null;
        }
        var defaultStartDate = DateTime.Now.GetPastBusinessDay(3);
        MarketFeed? lastMarketFeed = MarketFeedRepository.GetLastRecordBySymbol(symbol);
        DateTime startDate = lastMarketFeed?.Date ?? defaultStartDate;

        IEnumerable<MarketFeed>? marketFeeds = await NasdaqService.NasdaqGetDataAsync(startDate, symbol).ConfigureAwait(false);

        if (marketFeeds != null && marketFeeds.Any())
        {

            MarketFeedRepository.InsertMarketFeedDataFromApi(symbol, marketFeeds);
            marketFeeds = null;
        }

        marketFeeds = await MarketFeedRepository.GetChartDataBySymbol(symbol, defaultStartDate).ConfigureAwait(false);

        MultiCharts.datasets[symbol] = marketFeeds.ToList();
        var filtered = MultiCharts.FilterData(marketFeeds, PointSize);
        SymbolChanged(chartId, symbol);
        return filtered;

    }

    public async Task SendChartDataInChunks(string symbol, IEnumerable<MarketFeed> marketFeeds)
    {
        MultiCharts.datasets[symbol] = marketFeeds.ToList();
        var chunks = MultiCharts.FilterData(marketFeeds, PointSize).Chunk(MarketFeedChunkSize);

        foreach (var chunk in chunks)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("setDataToChartBySymbol", symbol, chunk, false);
                var tempChunk = chunk;
                tempChunk = null;

                GC.Collect();
                GC.WaitForPendingFinalizers();
            }
            catch (Exception ex){
            }
        }

        try
        {
            await JSRuntime.InvokeVoidAsync("setDataToChartBySymbol", symbol, null, true);
        }
        catch (Exception ex)
        {
        }
    }

    [JSInvokable]
    public async Task<IEnumerable<MarketFeed>?> GetChartDataBySymbol(string symbol, DataPoint? lastPoint)
    {
        var filtered = MultiCharts.FilterData(MultiCharts.datasets[symbol], PointSize);
        return filtered;
    }

    [JSInvokable]
    public IEnumerable<MarketFeed>? GetExtremeDataBySymbol(string symbol, JsonElement? minElement, JsonElement? maxElement)
    {
        if (minElement == null || maxElement == null)
            return [];
        long? min = minElement?.ValueKind == JsonValueKind.Number ? Convert.ToInt64(minElement?.GetDouble()) : (long?)null;
        long? max = maxElement?.ValueKind == JsonValueKind.Number ? Convert.ToInt64(maxElement?.GetDouble()) : (long?)null;
        var startDate = MultiCharts.UnixTimeStampToDateTime((long)min);
        var endDate = MultiCharts.UnixTimeStampToDateTime((long)max);
        var extremeData = MultiCharts.datasets[symbol].FindAll((x) => x.Date >= startDate && x.Date <= endDate);
        var filteredData = MultiCharts.FilterData(extremeData, 300);
        return filteredData;
    }

    [JSInvokable]
    public async Task<IEnumerable<MarketFeed>?> GetFilteredDataBySymbol(string symbol, double range)
    {
        MultiCharts.Ranges[symbol] = range;
        var RangeDate = DateTime.UtcNow.AddMilliseconds(-range);
        DateTime eastern = TimeZoneInfo
    .ConvertTimeFromUtc(
      RangeDate,
      TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time"));
        var last = MultiCharts.datasets[symbol][MultiCharts.datasets[symbol].Count - 1];
        var filtered = MultiCharts.datasets[symbol].Where((x) => x.Date >= eastern).ToList();
        filtered = MultiCharts.FilterData(filtered, PointSize);
        return filtered;
    }

    public void Dispose()
    {
        RemoveRefresh();
        _dotChartWindowRef?.Dispose();
    }

}