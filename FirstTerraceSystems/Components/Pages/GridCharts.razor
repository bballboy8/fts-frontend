@page "/gridCharts"

<MudDropContainer T="DropChart" Items="ChartIds" ItemsSelector="@((item, dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-grow-1">
    <ChildContent>
        <MudGrid>
            @foreach (var chart in ChartIds)
            {
                <MudItem xs="4">
                    <MudPaper Class="ma-4 flex-grow-1">
                        <MudDropZone T="DropChart" Identifier="@chart.Selector" Class="rounded rounded mud-background-grayflex-grow-1">
                            <div id="@($"chartContainer_{chart.Name}")" style="width: 100%; height: 285px;"></div>
                        </MudDropZone>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    </ChildContent>
</MudDropContainer>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadChart();
    }

    private void ItemUpdated(MudItemDropInfo<DropChart> dropChart)
    {
        dropChart.Item.Selector = dropChart.DropzoneIdentifier;
        LoadChart();
    }

    private List<DropChart> ChartIds = new()
    {
        new DropChart(){ Name = "ChartId1", Selector = "1" },
        new DropChart(){ Name = "ChartId2", Selector = "2" },
        new DropChart(){ Name = "ChartId3", Selector = "3" },
        new DropChart(){ Name = "ChartId4", Selector = "4" },
        new DropChart(){ Name = "ChartId5", Selector = "5" },
        new DropChart(){ Name = "ChartId6", Selector = "6" },
        new DropChart(){ Name = "ChartId7", Selector = "7" },
        new DropChart(){ Name = "ChartId8", Selector = "8" },
        new DropChart(){ Name = "ChartId9", Selector = "9" },
    };

    public class DropChart
    {
        public string Name { get; init; }
        public string Selector { get; set; }
    }
    private async Task LoadChart()
    {
        foreach (var id in ChartIds)
            await JSRuntime.InvokeVoidAsync("loadMultiStockChart", $"chartContainer_{id.Name}");
    }
}
